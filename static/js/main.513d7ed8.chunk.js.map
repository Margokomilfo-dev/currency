{"version":3,"sources":["redux/actions.ts","redux/selectors.ts","components/CurrencyExchange.tsx","components/CurrencyEContainer.tsx","App.tsx","redux/currencyReducer.ts","redux/state.ts","index.tsx"],"names":["ACTIONS_TYPE","ChangeCurrencyFieldAC","amountOfBYN","amountOfCurrency","type","CHANGE_CURRENCY_FIELD_TYPE","payload","ChangeActionAC","isBuying","CHANGE_CHANGE_ACTION","selectCurrencyState","state","currency","CurrencyExchange","props","currenciesName","currentCurrency","currencyRate","changeCurrencyField","changeAction","changeCurrentCurrency","viewCurrency","value","data-currency","onChange","className","map","index","onClick","data-action","CurrencyEContainer","dispatch","_useDispatch","ac","useDispatch","useSelector","currencies","currencyName","buyRate","sellRate","e","currentTarget","isFinite","dataset","trigger","Number","toFixed","action","CHANGE_CURRENT_CURRENCY","changeCurrentCurrencyAC","App","initialState","reducers","combineReducers","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.513d7ed8.chunk.js","sourcesContent":["import {useDispatch as _useDispatch} from 'react-redux'\r\n\r\nexport enum ACTIONS_TYPE {\r\n    CHANGE_CURRENCY_FIELD_TYPE = 'currency/redux/actions/CHANGE_CURRENCY_FIELD_TYPE',\r\n    CHANGE_CHANGE_ACTION = 'currency/redux/actions/CHANGE_CHANGE_ACTION',\r\n    CHANGE_CURRENT_CURRENCY = 'currency/redux/actions/CHANGE_CURRENT_CURRENCY',\r\n}\r\n\r\nexport type ChangeCurrencyFieldType = ReturnType<typeof ChangeCurrencyFieldAC>\r\nexport const ChangeCurrencyFieldAC = (amountOfBYN: string, amountOfCurrency: string) => ({\r\n    type: ACTIONS_TYPE.CHANGE_CURRENCY_FIELD_TYPE, payload: {amountOfBYN, amountOfCurrency}} as const)\r\n\r\nexport type ChangeAction = ReturnType<typeof ChangeActionAC>\r\nexport const ChangeActionAC = (isBuying: boolean) =>\r\n    ({type: ACTIONS_TYPE.CHANGE_CHANGE_ACTION, payload: {isBuying}}as const)\r\n\r\nexport type ChangeCurrentCurrencyType = ReturnType<typeof changeCurrentCurrencyAC>\r\nexport const changeCurrentCurrencyAC = (currentCurrency: string) =>\r\n    ({type: ACTIONS_TYPE.CHANGE_CURRENT_CURRENCY, payload: {currentCurrency}}as const)\r\n\r\n//ActionsType\r\nexport type ActionsType = ChangeCurrencyFieldType | ChangeAction | ChangeCurrentCurrencyType\r\nexport function useDispatch() {\r\n    const dispatch = _useDispatch()\r\n    return (ac: ActionsType) => dispatch(ac)\r\n}","import { GlobalStateType } from './state'\r\n\r\nexport const selectCurrencyState = (state: GlobalStateType) => state.currency","import React from 'react'\r\n\r\ntype CurrencyExchangePropsType = {\r\n    currenciesName: string[];\r\n    currentCurrency: string;\r\n    currencyRate: number;\r\n    isBuying: boolean;\r\n    amountOfBYN: string;\r\n    amountOfCurrency: string;\r\n    changeCurrencyField: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n    changeAction: (e: React.MouseEvent<HTMLSpanElement>) => void;\r\n    changeCurrentCurrency: (e: React.MouseEvent<HTMLLIElement>) => void;\r\n};\r\n\r\nexport const CurrencyExchange: React.FC<CurrencyExchangePropsType> = (props) => {\r\n    let {\r\n        currenciesName, currentCurrency, currencyRate, isBuying, amountOfBYN, amountOfCurrency, changeCurrencyField,\r\n        changeAction, changeCurrentCurrency\r\n    } = props\r\n\r\n    const viewCurrency = isBuying ? (\r\n        <>\r\n            <label>\r\n                You give the next amount of BYN:\r\n                <input value={amountOfBYN} data-currency=\"byn\" onChange={changeCurrencyField}/>\r\n            </label>\r\n            <label>\r\n                You get the next amount of {currentCurrency}:\r\n                <input value={amountOfCurrency} data-currency=\"currency\" onChange={changeCurrencyField}/>\r\n            </label>\r\n        </>\r\n\r\n    ) : (\r\n        <>\r\n            <label>\r\n                You give the next amount of {currentCurrency}:\r\n                <input value={amountOfCurrency} data-currency=\"currency\" onChange={changeCurrencyField}/>\r\n            </label>\r\n            <label>\r\n                You get the next amount of BYN:\r\n                <input value={amountOfBYN} data-currency=\"byn\" onChange={changeCurrencyField}/>\r\n            </label>\r\n        </>\r\n    )\r\n\r\n    return (\r\n        <div className=\"currency\">\r\n            <h2>Currency exchange</h2>\r\n            <div className=\"currency-names\">\r\n                <p>Current currency:</p>\r\n                <ul>\r\n                    {currenciesName.map((currency: string, index: number) => {\r\n                        return (\r\n                            <li\r\n                                key={`${index}-${currency}`}\r\n                                className={`currencies ${currentCurrency === currency ? 'activeCurrency' : null}`}\r\n                                onClick={changeCurrentCurrency}\r\n                                data-currency={currency}\r\n                            >\r\n                                {currency}\r\n                            </li>\r\n                        )\r\n                    })}\r\n                </ul>\r\n            </div>\r\n            <div className=\"currency-action\">\r\n        <span className={isBuying ? 'active' : ''} data-action=\"buy\" onClick={changeAction}>\r\n          Buy\r\n        </span>\r\n                <span className={isBuying ? '' : 'active'} data-action=\"sell\" onClick={changeAction}>\r\n          Sell\r\n        </span>\r\n            </div>\r\n            <div className=\"fields\">\r\n                <p>Currency rate: {currencyRate}</p>\r\n                {viewCurrency}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport {useSelector} from 'react-redux'\r\nimport {\r\n    ChangeActionAC,\r\n    ChangeCurrencyFieldAC,\r\n    changeCurrentCurrencyAC,\r\n    useDispatch\r\n} from '../redux/actions'\r\nimport {selectCurrencyState} from '../redux/selectors'\r\nimport { CurrencyExchange } from './CurrencyExchange'\r\n\r\nexport const CurrencyEContainer: React.FunctionComponent = () => {\r\n\r\n    const dispatch = useDispatch() //теперь мы присваиваем наш типизированный самонаписанный юзДиспатч - вуаля! В АС-файле мы  добавили свою функции юзДиспатча и ее сюда импортируем.\r\n    let currencyRate: number = 0\r\n\r\n    const {currencies, currentCurrency, isBuying, amountOfBYN, amountOfCurrency} = useSelector(selectCurrencyState)\r\n\r\n    const currenciesName = currencies.map((currency) => {\r\n        if (currency.currencyName === currentCurrency) {\r\n            currencyRate = isBuying ? currency.buyRate : currency.sellRate\r\n        }\r\n        return currency.currencyName\r\n    })\r\n\r\n    const changeCurrencyField = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        let value = e.currentTarget.value\r\n        if (!isFinite(+value)) return\r\n        if (e.currentTarget.dataset.currency) {\r\n            const trigger: string = e.currentTarget.dataset.currency\r\n            if (trigger === 'byn') {\r\n                if (value === '') {\r\n                    dispatch(ChangeCurrencyFieldAC(value, value))\r\n                } else {\r\n                    dispatch(ChangeCurrencyFieldAC(value, (+(Number(value).toFixed(2)) / currencyRate).toFixed(2)))\r\n                }\r\n            } else {\r\n                if (value === '') {\r\n                    dispatch(ChangeCurrencyFieldAC(value, value))\r\n                } else {\r\n                    dispatch(ChangeCurrencyFieldAC((+Number(value).toFixed(2) * currencyRate).toFixed(2), value))\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const changeAction = (e: React.MouseEvent<HTMLSpanElement>) => {\r\n        e.currentTarget.dataset.action === 'buy' ? dispatch(ChangeActionAC(true)) : dispatch(ChangeActionAC(false))\r\n    }\r\n\r\n    const changeCurrentCurrency = (e: React.MouseEvent<HTMLLIElement>) => {\r\n        e.currentTarget.dataset.currency && dispatch(changeCurrentCurrencyAC(e.currentTarget.dataset.currency))\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <CurrencyExchange\r\n                currenciesName={currenciesName}\r\n                currentCurrency={currentCurrency}\r\n                currencyRate={currencyRate}\r\n                isBuying={isBuying}\r\n                amountOfBYN={amountOfBYN}\r\n                amountOfCurrency={amountOfCurrency}\r\n                changeCurrencyField={changeCurrencyField}\r\n                changeAction={changeAction}\r\n                changeCurrentCurrency={changeCurrentCurrency}\r\n            />\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\nimport './App.css'\nimport { CurrencyEContainer } from './components/CurrencyEContainer'\n\nfunction App() {\n    return (\n        <div className=\"container\">\n            <CurrencyEContainer/>\n        </div>\n    )\n}\n\nexport default App\n","import {ACTIONS_TYPE, ActionsType} from './actions'\r\n\r\ntype CurrencyType = {\r\n    currencyName: string\r\n    buyRate: number\r\n    sellRate: number\r\n}\r\nexport type CurrencyState = {\r\n    currencies: Array<CurrencyType>\r\n    currentCurrency: string\r\n    isBuying: boolean\r\n    amountOfBYN: string\r\n    amountOfCurrency: string\r\n}\r\n\r\nconst initialState: CurrencyState = {\r\n    currencies: [\r\n        {\r\n            currencyName: 'USD',\r\n            buyRate: 2.62,\r\n            sellRate: 2.58,\r\n        },\r\n        {\r\n            currencyName: 'EUR',\r\n            buyRate: 3.1,\r\n            sellRate: 3.06,\r\n        },\r\n        {\r\n            currencyName: 'RUR',\r\n            buyRate: 0.0345,\r\n            sellRate: 0.0341,\r\n        },\r\n    ],\r\n    currentCurrency: 'USD',\r\n    isBuying: true,\r\n    amountOfBYN: '',\r\n    amountOfCurrency: '',\r\n}\r\n\r\nexport const currencyReducer = (state: CurrencyState = initialState, action: ActionsType): CurrencyState => {\r\n     switch (action.type) {\r\n        case ACTIONS_TYPE.CHANGE_CURRENT_CURRENCY:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n                amountOfBYN: '',\r\n                amountOfCurrency: '',\r\n            }\r\n\r\n        case ACTIONS_TYPE.CHANGE_CHANGE_ACTION:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n                amountOfBYN: '',\r\n                amountOfCurrency: '',\r\n            }\r\n        case ACTIONS_TYPE.CHANGE_CURRENCY_FIELD_TYPE:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n","import {combineReducers, createStore, Store} from 'redux'\r\nimport {currencyReducer} from './currencyReducer'\r\n\r\nconst reducers = combineReducers({\r\n    currency: currencyReducer,\r\n})\r\nexport type GlobalStateType = ReturnType<typeof reducers>;\r\n\r\nexport const store: Store = createStore(reducers)\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { Provider } from 'react-redux'\nimport { store } from './redux/state'\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n)\n"],"sourceRoot":""}